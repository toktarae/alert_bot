import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, ConversationHandler

TOKEN = "8064065506:AAEhEhDYD7DJqumMztFVava42YMB1ju-OWI"

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –≠—Ç–∞–ø—ã —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
(G_CITY, G_TOTAL_BS, G_DOWN_BS, G_TIME, G_CAUSE, G_RESPONSIBLE) = range(6)
current_template = ""

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:\n/outage\n/degradation\n/datacenter")
/outage
/degradation
/datacenter")

# OUTAGE
async def outage_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['type'] = "outage"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:")
    return G_CITY

async def collect_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['city'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ë–°:")
    return G_TOTAL_BS

async def collect_total_bs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['total_bs'] = update.message.text
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ –∏–∑ –Ω–∏—Ö –≤–Ω–µ —Å–µ—Ä–≤–∏—Å–∞?")
    return G_DOWN_BS

async def collect_down_bs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['down_bs'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:19 10.01.2025):")
    return G_TIME

async def collect_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['time'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:")
    return G_CAUSE

async def collect_cause(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['cause'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö:")
    return G_RESPONSIBLE

async def collect_responsible(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['responsible'] = update.message.text
    data = context.user_data
    msg = f"–ù–∞–±–ª—é–¥–∞–µ—Ç—Å—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –≥. {data['city']} —Å {data['time']}. " +           f"–í–Ω–µ —Å–µ—Ä–≤–∏—Å–∞ {data['down_bs']} –ë–° –∏–∑ {data['total_bs']}. –ü—Ä–∏—á–∏–Ω–∞: {data['cause']}. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {data['responsible']}."
    await update.message.reply_text("üì¢ –ì–æ—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:

" + msg)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    outage_conv = ConversationHandler(
        entry_points=[CommandHandler("outage", outage_start)],
        states={
            G_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_city)],
            G_TOTAL_BS: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_total_bs)],
            G_DOWN_BS: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_down_bs)],
            G_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_time)],
            G_CAUSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_cause)],
            G_RESPONSIBLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_responsible)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(outage_conv)
    app.run_polling()